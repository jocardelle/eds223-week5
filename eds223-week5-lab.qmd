---
title: "EDS 223: week 5"
author: "Josephine Cardelle"
format: html
editor_options: 
  chunk_output_type: console
---

## Setup
```{r}
library(sf) # vector handling
library(terra) # raster handling
library(tidyverse)
library(tmap) # map making
library(spData) # spatial data
library(spDataLarge) # spatial data
library(viridisLite)
```

```{r}
elevation <- rast(system.file("raster/srtm.tif", package = "spDataLarge"))

boundary <- read_sf(system.file("vector/zion.gpkg", package = "spDataLarge"))
```


```{r}
# Check if coordinate reference systems match
if(crs(elevation) == crs(boundary)) {
  print("Coordinate reference systems match")
} else{
  warning("Updating coordinate reference systems to match")
# Transform data to match
  boundary <- st_transform(boundary, st_crs(elevation))
}
```

```{r}
tm_shape(elevation) +
  tm_raster(title = "Elevation (meters)") +
tm_shape(boundary) +
  tm_borders(lwd = 2) +
tm_layout(legend.outside = TRUE)
```

## Raster cropping
```{r}
# Crop the raster to the extent of the vector object
elevation_cropped <- terra::crop(elevation, boundary)

# Make map of cropped raster
tm_shape(elevation_cropped) +
  tm_raster(title = "Elevation (meters)") +
tm_shape(boundary) +
  tm_borders(lwd = 2) +
tm_layout(legend.outside = TRUE)
```


```{r}
# Mask our raster based on vector object
# Convert cells outside of the park to NA

elevation_masked <- terra::mask(elevation, boundary)

# Create map of masked raster
tm_shape(elevation_masked) +
  tm_raster(title = "Elevation (meters)") +
tm_shape(boundary) +
  tm_borders(lwd = 2) +
tm_layout(legend.outside = TRUE)
```

```{r}
# Mask our raster based on cropped vector object

elevation_masked_cropped <- terra::mask(elevation_cropped, boundary)

# Create map of masked and cropped raster
tm_shape(elevation_masked_cropped) +
  tm_raster(title = "Elevation (meters)") +
tm_shape(boundary) +
  tm_borders(lwd = 2) +
tm_layout(legend.outside = TRUE)
```

```{r}
# Mask our raster based on vector object
# Convert cells outside of the park to NA

elevation_inverse_mask <- terra::mask(elevation_cropped, boundary, inverse = TRUE)

tm_shape(elevation_inverse_mask) +
  tm_raster(title = "Elevation (meters)") +
tm_shape(boundary) +
  tm_borders(lwd = 2) +
tm_layout(legend.outside = TRUE)
```

## Raster vectorization
```{r}
# Masking to cells inside the park
elevation_inside <- mask(elevation_cropped, boundary)

# directly reassign layer names
names(elevation) <- "elevation"

# create masked based on grid cells higher than 2000 meters by masking the elevation raster
elevation_mask <- elevation_inside

elevation_mask[elevation_mask < 2000] <- NA

# Map masked elevations
tm_shape(elevation_mask) +
  tm_raster() +
  tm_layout(legend.outside = TRUE)


# Convert these grid cells into polygons using the terra::as.polygons() function and turn this into a sf object
elevation_mask_poly <- terra::as.polygons(elevation_mask) %>% 
  st_as_sf()

tm_shape(elevation_mask_poly) +
  tm_polygons() +
  tm_layout(legend.outside = TRUE)

```

```{r}
# Arrange maps together
map1 <- tm_shape(elevation_mask) +
  tm_raster() +
  tm_layout(legend.outside = TRUE,
            main.title = "masked raster")

map2 <- tm_shape(elevation_mask_poly) +
  tm_polygons() +
  tm_layout(main.title = "vectorized raster")

tmap_arrange(map1, map2, nrow = 1)
```



```{r}
data("zion_points", package = "spDataLarge")

crs(zion_points) == crs(elevation)

zion_points <- st_transform(zion_points, crs = st_crs(elevation))

tm_shape(elevation) +
  tm_raster() +
  tm_shape(boundary) +
  tm_borders() +
  tm_shape(zion_points) +
  tm_symbols()

pts_elevation <- terra::extract(elevation, zion_points)
zion_points <- cbind(zion_points, pts_elevation)

```

```{r}
zion_transect <- cbind(c(-133.2, -122.9),
                       c(37.45, 37.2)) %>% 
  st_linestring() %>% 
  st_sfc(crs = crs(elevation)) %>% 
  st_sf(geometry = .)

tm_shape(elevation) +
  tm_raster() +
  tm_shape(zion_transect) +
  tm_symbols()

zion_transect$id = 1:nrow(zion_transect)
zion_transect <- st_segmentize(zion_transect, dfMaxLength = 250)
zion_transect <- st_cast(zion_transect, "POINT")

zion_transect <- zion_transect %>% 
  group_by(id) %>% 
  mutate(dist = st_distance(geometry)[,1])

transect <- terra::extract(elevation, zion_transect)
zion_transect <- cbind(zion_transect, transect)

library(units)

zion_transect <- zion_transect %>% 
  filter(!is.na(elevation))

ggplot(zion_transect, aes(x = dist, y = elevation)) +
  geom_point()
```

